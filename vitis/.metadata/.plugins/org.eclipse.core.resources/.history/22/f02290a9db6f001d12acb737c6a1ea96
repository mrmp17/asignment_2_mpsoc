/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xbram.h"
//#include "xkalmanfilterkernel.h"

//#include "data.h"

#define BRAM0(A) ((volatile u32*)px_config0->MemBaseAddress)[A]
#define BRAM1(A) ((volatile u32*)px_config1->MemBaseAddress)[A]

#define N_SAMPLES 300

XBram x_bram0;
XBram_Config *px_config0;

XBram x_bram1;
XBram_Config *px_config1;

XKalmanfilterkernel kf_kernel;
XKalmanfilterkernel_Config *kf_config;


//kalman parameters
float q = 0.5;
float r = 0.5;


int main()
{
    init_platform();

    xil_printf("Hello World\n\r");
    xil_printf("Successfully ran Hello World application\n\r");

    // BRAM0 init (data input to kalman: first 6 addresses)
    px_config0 = XBram_LookupConfig(XPAR_BRAM_0_DEVICE_ID);
	int x_status = XBram_CfgInitialize(&x_bram0, px_config0, px_config0->CtrlBaseAddress);
    xil_printf("bram0 status: %d \n\r", x_status);

    // BRAM1 init (data output from kalman: first 6 addresses)
    px_config1 = XBram_LookupConfig(XPAR_BRAM_1_DEVICE_ID);
	x_status = XBram_CfgInitialize(&x_bram1, px_config1, px_config1->CtrlBaseAddress);
	xil_printf("bram1 status: %d \n\r", x_status);

	// kalman kernel config
	kf_config = XKalmanfilterkernel_LookupConfig(XPAR_KALMANFILTERKERNEL_0_DEVICE_ID);
	x_status = XKalmanfilterkernel_CfgInitialize(&kf_kernel, kf_config);
	xil_printf("kalman config init status: %d \n\r", x_status);
	x_status = XKalmanfilterkernel_Initialize(&kf_kernel, XPAR_KALMANFILTERKERNEL_0_DEVICE_ID);
	xil_printf("kalman init status: %d \n\r", x_status);



	// ########################################### BRAM TEST
    xil_printf("writing to bram0...\n\r");

    BRAM0(0x12) = 0xAB;  //############ crahses here
    //u32 *ptr = 0xA0000000;
    //*ptr = 0x22;

    xil_printf("reading bram0...\n\r");
    u32 val;
    //val = *ptr;
    val = BRAM0(0x12);
    xil_printf("got from bram: %d \n\r", val);
    //xil_printf("goodbye...");
    // ##################################################END BRAM TEST

    // ################################################### KALMAN TEST

    //set Q and R parameters
    XKalmanfilterkernel_Set_q(&kf_kernel, q);
	XKalmanfilterkernel_Set_r(&kf_kernel, r);

	// run kalman for every sample
	for (int i = 0; i < N_SAMPLES; i++) {
			// put one sample into BRAM0
			for (int j = 0; j < 6; j++) {
				BRAM0(i*6+j)= *(u32 *)(&(din[i]));
			}
			//start kernel
			XKalmanfilterkernel_Start(&kf_kernel);
			// wait for kernel to finish
			while(!XKalmanfilterkernel_IsDone(&kf_kernel));

			char buffer[100];
			for (int m = 0 ; m<6 ; m++){
				u32 val = BRAM1(m);
				if(m==0){ //start
					sprintf(buffer, "%f", *(float *)(&(val)));
				}
				else{ //append
					sprintf(buffer, "%s, %f", buffer, *(float *)(&(val)));
				}
			}

			// print output to terminal
			sprintf(buffer, "%s\n", buffer);

		}



    cleanup_platform();
    return 0;
}
